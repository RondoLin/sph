{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n//对axios进行二次封装\nimport axios from \"axios\";\nimport nprogress from 'nprogress';\nimport \"nprogress/nprogress.css\";\nimport store from '@/store'; //利用axios对象的方法create创建一个axios实例\n//request就是axios，只不过稍微配置一下\n\nconst requests = axios.create({\n  //在路径中默认带有/api\n  // baseURL:\"/api\",  \n  //请求超时时间\n  timeout: 5000\n}); //请求拦截器，在发送请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情\n\nrequests.interceptors.request.use(config => {\n  if (store.state.detail.uuid_token) {\n    config.headers.useTempId = store.state.detail.uuid_token;\n  }\n\n  nprogress.start();\n\n  if (store.state.user.token) {\n    config.headers.token = store.state.user.token;\n  } //config：配置对象，对象里面用一个属性很重要，headers请求头\n\n\n  return config;\n}); //响应拦截器    \n\nrequests.interceptors.response.use(res => {\n  nprogress.done(); //成功的回调函数\n\n  return res.data;\n}, error => {\n  //失败的回调函数\n  return Promise.reject(new Error('fali'));\n});\nexport default requests;","map":null,"metadata":{},"sourceType":"module"}