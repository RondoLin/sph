{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedByid } from \"@/api\";\nconst state = {\n  getCartList: []\n};\nconst mutations = {\n  GETCARTLIST(state, getCartList) {\n    state.getCartList = getCartList;\n  }\n\n};\nconst actions = {\n  async getCartList({\n    commit\n  }) {\n    let result = await reqCartList();\n\n    if (result.code == 200) {\n      commit('GETCARTLIST', result.data);\n    }\n  },\n\n  async deleteCartListBySkuId({\n    commit\n  }, skuid) {\n    let result = await reqDeleteCartById(skuid);\n\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('fail'));\n    }\n  },\n\n  async updateCheckedById({\n    commit\n  }, {\n    skuid,\n    isChecked\n  }) {\n    let result = await reqUpdateCheckedByid(skuid, isChecked);\n\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('fail'));\n    }\n  },\n\n  async deleteAllCheckedCart({\n    dispatch,\n    getters\n  }) {\n    let PromiseAll = [];\n    getters.getCartList.forEach(item => {\n      let promise = item.isChecked == 1 ? dispatch('deleteCartListBSkuId', item.skuid) : '';\n      PromiseAll.push(promise);\n    });\n    return Promise.all(PromiseAll);\n  },\n\n  async updateAllCartChecked({\n    dispatch,\n    state\n  }, isChecked) {\n    let PromiseAll = [];\n    state.getCartList[0].forEach(item => {\n      let promise = dispatch('updateAllCartChecked', {\n        skuid: item.skuid,\n        isChecked\n      });\n      PromiseAll.push(promise);\n    });\n    return Promise.all(PromiseAll);\n  }\n\n};\nconst getters = {\n  // getCartList(state){\n  //     return state.getCartList || []\n  // },\n  gett\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["reqCartList","reqDeleteCartById","reqUpdateCheckedByid","state","getCartList","mutations","GETCARTLIST","actions","commit","result","code","data","deleteCartListBySkuId","skuid","Promise","reject","Error","updateCheckedById","isChecked","deleteAllCheckedCart","dispatch","getters","PromiseAll","forEach","item","promise","push","all","updateAllCartChecked","gett"],"sources":["D:/Users/Rondo Lin/Desktop/sph_app/src/store/shopcart/index.js"],"sourcesContent":["\r\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedByid } from \"@/api\"\r\n\r\n\r\n\r\nconst state = {\r\n    getCartList:[]\r\n}\r\nconst mutations = {\r\n    GETCARTLIST(state,getCartList){\r\n        state.getCartList = getCartList\r\n    }\r\n    \r\n}\r\nconst actions = {\r\n    async getCartList({commit}){\r\n        let result = await reqCartList()\r\n        if(result.code == 200){\r\n            commit('GETCARTLIST',result.data)\r\n        }\r\n    },\r\n    async deleteCartListBySkuId({commit},skuid){\r\n        let result = await reqDeleteCartById(skuid)\r\n        if(result.code==200){\r\n            return 'ok'\r\n        }else{\r\n            return Promise.reject(new Error('fail'))\r\n        }\r\n    },\r\n    async updateCheckedById({commit},{skuid,isChecked}){\r\n        let result = await reqUpdateCheckedByid(skuid,isChecked)\r\n        if(result.code==200){\r\n            return 'ok'\r\n        }else{\r\n            return Promise.reject(new Error('fail'))\r\n        }\r\n    },\r\n    async deleteAllCheckedCart({dispatch,getters}){\r\n        let PromiseAll = []\r\n        getters.getCartList.forEach(item => {\r\n            let promise = item.isChecked == 1?dispatch('deleteCartListBSkuId',item.skuid):''\r\n            PromiseAll.push(promise)\r\n        });\r\n        return Promise.all(PromiseAll)\r\n    } ,  \r\n    async updateAllCartChecked({dispatch,state},isChecked){\r\n        let PromiseAll = []\r\n        state.getCartList[0].forEach(item => {\r\n            let promise = dispatch('updateAllCartChecked',{\r\n                skuid:item.skuid,\r\n                isChecked\r\n            })\r\n            PromiseAll.push(promise)\r\n        });\r\n        return Promise.all(PromiseAll)\r\n    } ,  \r\n}\r\nconst getters = {\r\n    // getCartList(state){\r\n    //     return state.getCartList || []\r\n    // },\r\n    gett\r\n}\r\n\r\nexport default {\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n}"],"mappings":";AACA,SAASA,WAAT,EAAsBC,iBAAtB,EAAyCC,oBAAzC,QAAqE,OAArE;AAIA,MAAMC,KAAK,GAAG;EACVC,WAAW,EAAC;AADF,CAAd;AAGA,MAAMC,SAAS,GAAG;EACdC,WAAW,CAACH,KAAD,EAAOC,WAAP,EAAmB;IAC1BD,KAAK,CAACC,WAAN,GAAoBA,WAApB;EACH;;AAHa,CAAlB;AAMA,MAAMG,OAAO,GAAG;EACZ,MAAMH,WAAN,CAAkB;IAACI;EAAD,CAAlB,EAA2B;IACvB,IAAIC,MAAM,GAAG,MAAMT,WAAW,EAA9B;;IACA,IAAGS,MAAM,CAACC,IAAP,IAAe,GAAlB,EAAsB;MAClBF,MAAM,CAAC,aAAD,EAAeC,MAAM,CAACE,IAAtB,CAAN;IACH;EACJ,CANW;;EAOZ,MAAMC,qBAAN,CAA4B;IAACJ;EAAD,CAA5B,EAAqCK,KAArC,EAA2C;IACvC,IAAIJ,MAAM,GAAG,MAAMR,iBAAiB,CAACY,KAAD,CAApC;;IACA,IAAGJ,MAAM,CAACC,IAAP,IAAa,GAAhB,EAAoB;MAChB,OAAO,IAAP;IACH,CAFD,MAEK;MACD,OAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,MAAV,CAAf,CAAP;IACH;EACJ,CAdW;;EAeZ,MAAMC,iBAAN,CAAwB;IAACT;EAAD,CAAxB,EAAiC;IAACK,KAAD;IAAOK;EAAP,CAAjC,EAAmD;IAC/C,IAAIT,MAAM,GAAG,MAAMP,oBAAoB,CAACW,KAAD,EAAOK,SAAP,CAAvC;;IACA,IAAGT,MAAM,CAACC,IAAP,IAAa,GAAhB,EAAoB;MAChB,OAAO,IAAP;IACH,CAFD,MAEK;MACD,OAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,MAAV,CAAf,CAAP;IACH;EACJ,CAtBW;;EAuBZ,MAAMG,oBAAN,CAA2B;IAACC,QAAD;IAAUC;EAAV,CAA3B,EAA8C;IAC1C,IAAIC,UAAU,GAAG,EAAjB;IACAD,OAAO,CAACjB,WAAR,CAAoBmB,OAApB,CAA4BC,IAAI,IAAI;MAChC,IAAIC,OAAO,GAAGD,IAAI,CAACN,SAAL,IAAkB,CAAlB,GAAoBE,QAAQ,CAAC,sBAAD,EAAwBI,IAAI,CAACX,KAA7B,CAA5B,GAAgE,EAA9E;MACAS,UAAU,CAACI,IAAX,CAAgBD,OAAhB;IACH,CAHD;IAIA,OAAOX,OAAO,CAACa,GAAR,CAAYL,UAAZ,CAAP;EACH,CA9BW;;EA+BZ,MAAMM,oBAAN,CAA2B;IAACR,QAAD;IAAUjB;EAAV,CAA3B,EAA4Ce,SAA5C,EAAsD;IAClD,IAAII,UAAU,GAAG,EAAjB;IACAnB,KAAK,CAACC,WAAN,CAAkB,CAAlB,EAAqBmB,OAArB,CAA6BC,IAAI,IAAI;MACjC,IAAIC,OAAO,GAAGL,QAAQ,CAAC,sBAAD,EAAwB;QAC1CP,KAAK,EAACW,IAAI,CAACX,KAD+B;QAE1CK;MAF0C,CAAxB,CAAtB;MAIAI,UAAU,CAACI,IAAX,CAAgBD,OAAhB;IACH,CAND;IAOA,OAAOX,OAAO,CAACa,GAAR,CAAYL,UAAZ,CAAP;EACH;;AAzCW,CAAhB;AA2CA,MAAMD,OAAO,GAAG;EACZ;EACA;EACA;EACAQ;AAJY,CAAhB;AAOA,eAAe;EACX1B,KADW;EAEXE,SAFW;EAGXE,OAHW;EAIXc;AAJW,CAAf"},"metadata":{},"sourceType":"module"}