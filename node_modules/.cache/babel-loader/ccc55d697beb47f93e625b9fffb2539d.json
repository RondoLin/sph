{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedByid } from \"@/api\";\nconst state = {\n  getCartList: []\n};\nconst mutations = {\n  GETCARTLIST(state, getCartList) {\n    state.getCartList = getCartList;\n  }\n\n};\nconst actions = {\n  async getCartList({\n    commit\n  }) {\n    let result = await reqCartList();\n\n    if (result.code == 200) {\n      commit('GETCARTLIST', result.data);\n    }\n  },\n\n  async deleteCartListBySkuId({\n    commit\n  }, skuid) {\n    let result = await reqDeleteCartById(skuid);\n\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('fail'));\n    }\n  },\n\n  async updateCheckedById({\n    commit\n  }, {\n    skuId,\n    isChecked\n  }) {\n    let result = await reqUpdateCheckedByid(skuId, isChecked);\n\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('fail'));\n    }\n  },\n\n  async deleteAllCheckedCart({\n    dispatch,\n    getters\n  }) {\n    let PromiseAll = [];\n    getters.getCartList.forEach(item => {\n      let promise = item.isChecked == 1 ? dispatch('deleteCartListBSkuId', item.skuid) : '';\n      PromiseAll.push(promise);\n    });\n    return Promise.all(PromiseAll);\n  },\n\n  async updateAllCartChecked({\n    dispatch,\n    state\n  }, isChecked) {\n    let PromiseAll = [];\n    state.getCartList[0].forEach(item => {\n      let promise = dispatch('updateAllCartChecked', {\n        skuid: item.skuid,\n        isChecked\n      });\n      PromiseAll.push(promise);\n    });\n    return Promise.all(PromiseAll);\n  }\n\n};\nconst getters = {\n  getCartList(state) {\n    return state.getCartList[0] || {};\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":null,"metadata":{},"sourceType":"module"}