{"ast":null,"code":"//对axios进行二次封装\nimport axios from \"axios\";\nimport nprogress from 'nprogress';\nimport \"nprogress/nprogress.css\"; //利用axios对象的方法create创建一个axios实例\n//request就是axios，只不过稍微配置一下\n\nconst requests = axios.create({\n  //在路径中默认带有/api\n  // baseURL:\"/api\",  \n  //请求超时时间\n  timeout: 2000\n}); //请求拦截器，在发送请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情\n\nrequests.interceptors.request.use(config => {\n  nprogress.start(); //config：配置对象，对象里面用一个属性很重要，headers请求头\n\n  return config;\n}); //成功的回调函数\n//失败的回调函数\n\nrequests.interceptors.request.use(params => {});\nexport default requests;","map":{"version":3,"names":["axios","nprogress","requests","create","timeout","interceptors","request","use","config","start","params"],"sources":["D:/Users/Rondo Lin/Desktop/sph_app/src/api/request.js"],"sourcesContent":["//对axios进行二次封装\r\nimport axios from \"axios\"\r\nimport nprogress from 'nprogress'\r\nimport \"nprogress/nprogress.css\"\r\n\r\n//利用axios对象的方法create创建一个axios实例\r\n//request就是axios，只不过稍微配置一下\r\nconst requests = axios.create({\r\n    //在路径中默认带有/api\r\n    // baseURL:\"/api\",  \r\n    //请求超时时间\r\n    timeout:2000,\r\n\r\n})\r\n\r\n//请求拦截器，在发送请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情\r\nrequests.interceptors.request.use((config) => {\r\n    nprogress.start()\r\n    //config：配置对象，对象里面用一个属性很重要，headers请求头\r\n    return config\r\n})\r\n    //成功的回调函数\r\n    //失败的回调函数\r\nrequests.interceptors.request.use((params) => {\r\n    \r\n})\r\n\r\n\r\nexport default requests"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,yBAAP,C,CAEA;AACA;;AACA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;EAC1B;EACA;EACA;EACAC,OAAO,EAAC;AAJkB,CAAb,CAAjB,C,CAQA;;AACAF,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,MAAD,IAAY;EAC1CP,SAAS,CAACQ,KAAV,GAD0C,CAE1C;;EACA,OAAOD,MAAP;AACH,CAJD,E,CAKI;AACA;;AACJN,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCG,MAAD,IAAY,CAE7C,CAFD;AAKA,eAAeR,QAAf"},"metadata":{},"sourceType":"module"}