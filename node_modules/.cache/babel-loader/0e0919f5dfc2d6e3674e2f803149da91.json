{"ast":null,"code":"import { mapGetters } from \"vuex\";\nimport { throttle } from \"lodash\";\nexport default {\n  name: \"ShopCart\",\n\n  mounted() {\n    this.getData();\n  },\n\n  computed: { ...mapGetters([\"getCartList\"]),\n\n    cartList() {\n      return this.getCartList.cartInfoList || [];\n    },\n\n    totalPrice() {\n      let sum = 0;\n      this.cartList.forEach(item => {\n        sum += item.skuNum * item.skuPrice;\n      });\n      return sum;\n    },\n\n    isAllCheck() {\n      return this.cartList.every(item => item.isChecked = 1);\n    },\n\n    totalNum() {\n      let sum = 0;\n      this.cartList.forEach(item => {\n        sum += item.skuNum;\n      });\n      return sum;\n    }\n\n  },\n  methods: {\n    getData() {\n      this.$store.dispatch(\"getCartList\");\n    },\n\n    handler: throttle(async function (type, disNum, cart) {\n      switch (type) {\n        case \"add\":\n          disNum = 1;\n          break;\n\n        case \"minus\":\n          disNum = cart.skuNum > 1 ? -1 : 0;\n          break;\n\n        case \"change\":\n          if (isNaN(disNum)) {\n            disNum = 0;\n          } else {\n            disNum = parseInt(disNum) - cart.skuNum;\n          }\n\n          disNum = isNaN(disNum) || disNum < 1 ? 0 : parseInt(disNum) - cart.skuNum;\n          break;\n      }\n\n      try {\n        await this.$store.dispatch(\"addOrUpdateShopCart\", {\n          skuid: cart.skuId,\n          skuNum: disNum\n        });\n        this.getData();\n      } catch (error) {}\n    }, 500),\n\n    async deleteCartById(cart) {\n      try {\n        await this.$store.dispatch(\"deleteCartListBySkuId\", cart.skuId);\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    },\n\n    async updateChecked(cart, event) {\n      try {\n        let isChecked = event.target.checked ? \"1\" : \"0\";\n        await this.$store.dispatch(\"updateCheckedById\", {\n          skuId: cart.skuId,\n          isChecked\n        });\n        this.getData();\n      } catch (error) {}\n    },\n\n    async deleteAllCheckedCart() {\n      try {\n        await this.$store.dispatch(\"deleteAllCheckedCart\");\n        this.getData();\n      } catch (error) {}\n    },\n\n    async updateAllCartChecked(event) {\n      try {\n        await this.$store.dispatch(\"updateAllCartChecked\", isChecked);\n        this.getData();\n      } catch (error) {}\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}