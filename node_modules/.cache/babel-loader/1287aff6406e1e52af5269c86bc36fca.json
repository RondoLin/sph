{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n//对axios进行二次封装\nimport axios from \"axios\";\nimport nprogress from 'nprogress';\nimport \"nprogress/nprogress.css\";\nimport store from '@/store'; //利用axios对象的方法create创建一个axios实例\n//request就是axios，只不过稍微配置一下\n\nconst requests = axios.create({\n  //在路径中默认带有/api\n  // baseURL:\"/api\",  \n  //请求超时时间\n  timeout: 5000\n}); //请求拦截器，在发送请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情\n\nrequests.interceptors.request.use(config => {\n  if (store.state.detail.uuid_token) {\n    config.headers.useTemId = store.state.detail.uuid_token;\n  }\n\n  nprogress.start(); //config：配置对象，对象里面用一个属性很重要，headers请求头\n\n  return config;\n}); //响应拦截器    \n\nrequests.interceptors.response.use(res => {\n  nprogress.done(); //成功的回调函数\n\n  return res.data;\n}, error => {\n  //失败的回调函数\n  return Promise.reject(new Error('fali'));\n});\nexport default requests;","map":{"version":3,"names":["axios","nprogress","store","requests","create","timeout","interceptors","request","use","config","state","detail","uuid_token","headers","useTemId","start","response","res","done","data","error","Promise","reject","Error"],"sources":["D:/Users/Rondo Lin/Desktop/sph_app/src/api/ajax.js"],"sourcesContent":["//对axios进行二次封装\r\nimport axios from \"axios\"\r\nimport nprogress from 'nprogress'\r\nimport \"nprogress/nprogress.css\"\r\nimport store from '@/store'\r\n\r\n//利用axios对象的方法create创建一个axios实例\r\n//request就是axios，只不过稍微配置一下\r\nconst requests = axios.create({\r\n    //在路径中默认带有/api\r\n    // baseURL:\"/api\",  \r\n    //请求超时时间\r\n    timeout:5000,\r\n\r\n})\r\n\r\n//请求拦截器，在发送请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情\r\nrequests.interceptors.request.use((config) => {\r\n\r\n    if(store.state.detail.uuid_token){\r\n        config.headers.useTemId = store.state.detail.uuid_token\r\n    }\r\n    nprogress.start()\r\n    //config：配置对象，对象里面用一个属性很重要，headers请求头\r\n    return config\r\n})\r\n    \r\n//响应拦截器    \r\nrequests.interceptors.response.use((res) => {\r\n    nprogress.done()\r\n    //成功的回调函数\r\n    return res.data\r\n},(error) => {\r\n    //失败的回调函数\r\n    return Promise.reject(new Error('fali'))\r\n})\r\n\r\n\r\nexport default requests"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,yBAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;EAC1B;EACA;EACA;EACAC,OAAO,EAAC;AAJkB,CAAb,CAAjB,C,CAQA;;AACAF,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,MAAD,IAAY;EAE1C,IAAGP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,UAAtB,EAAiC;IAC7BH,MAAM,CAACI,OAAP,CAAeC,QAAf,GAA0BZ,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,UAA7C;EACH;;EACDX,SAAS,CAACc,KAAV,GAL0C,CAM1C;;EACA,OAAON,MAAP;AACH,CARD,E,CAUA;;AACAN,QAAQ,CAACG,YAAT,CAAsBU,QAAtB,CAA+BR,GAA/B,CAAoCS,GAAD,IAAS;EACxChB,SAAS,CAACiB,IAAV,GADwC,CAExC;;EACA,OAAOD,GAAG,CAACE,IAAX;AACH,CAJD,EAIGC,KAAD,IAAW;EACT;EACA,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,MAAV,CAAf,CAAP;AACH,CAPD;AAUA,eAAepB,QAAf"},"metadata":{},"sourceType":"module"}